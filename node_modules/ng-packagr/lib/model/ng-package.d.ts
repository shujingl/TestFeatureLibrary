import { SchemaClass } from '@ngtools/json-schema';
import { NgPackageConfig } from '../../ng-package.schema';
/** POVO (plain-old value object :-)) of the Angular package being built. */
export declare class NgPackage {
    /** Unmodified contents of the project's `package.json` file. */
    packageJson: any;
    /** Unmodified contents of the project's `ng-package.json` file. */
    ngPackageJson: NgPackageConfig;
    private basePath;
    private $schema;
    constructor(
        /** Unmodified contents of the project's `package.json` file. */
        packageJson: any, 
        /** Unmodified contents of the project's `ng-package.json` file. */
        ngPackageJson: NgPackageConfig, basePath: string, $schema: SchemaClass<NgPackageConfig>);
    readonly dest: string;
    readonly src: string;
    readonly workingDirectory: string;
    readonly flatModuleFileName: string;
    readonly libExternals: Object;
    readonly entryFile: string;
    /** Package meta information */
    readonly meta: {
        name: string;
        scope?: string;
    };
    /** Build artefacts */
    readonly artefacts: NgArtefacts;
}
/** Generated build artefacts for an Angular library. */
export interface NgArtefacts {
    /** Main JavaScript bundle in UMD (universal-module definition) and ES5 syntax. */
    main: string;
    /** Flat ECMAScript module in ES5 sxntax (FESM'5). */
    module: string;
    /** Flat ECMAScript module in ES2015 syntax (FESM'15). */
    es2015: string;
    /** TypeScript type definition file. */
    typings: string;
    /** Ahead-of-Time metadata (`.metadata.json`) file. */
    metadata: string;
}
/**
 * One individual entrypoint for an Angular library that is being packaged.
 *
 * An `NgPackage` may have several entrypoints (primary and secondaries).
 * One `NgEntrypoint` gets compiled and bundled to a set of `NgArtefacts`.
 */
export interface NgEntrypoint {
    /** TypeScript source file that serves as the entrypoint. */
    entryFile: string;
}
