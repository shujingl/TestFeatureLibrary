{"version":3,"file":"ng-packagr.js","sourceRoot":"","sources":["../../src/lib/ng-packagr.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAC7B,2CAA4D;AAC5D,oCAAwC;AACxC,wCAAuC;AACvC,qCAA6C;AAE7C,UAAU;AACV,gCAAkC;AAcrB,QAAA,SAAS,GAAG,UAAC,IAA2B;IACnD,GAAG,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IAErC,4BAA4B;IAC5B,IAAI,KAAgB,CAAC;IAErB,6CAA6C;IAC7C,MAAM,CAAC,qBAAW,CAAC,IAAI,CAAC,OAAO,CAAC;SAC7B,IAAI,CAAC,UAAC,CAAC;QACN,GAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAC5B,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,KAAK,GAAG,CAAC,CAAC;QAEV,WAAW;QACX,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;YACjB,eAAM,CAAC,CAAC,CAAC,IAAI,CAAC;YACd,eAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC;SAC3B,CAAC,CAAC;IACL,CAAC,CAAC;SAED,IAAI,CAAC,cAAM,OAAA,0BAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,EAA9B,CAA8B,CAAC;SAI1C,IAAI,CAAC,cAAM,OAAA,gBAAS,CAAI,KAAK,CAAC,GAAG,eAAY,EAAE,KAAK,CAAC,IAAI,CAAC,EAA/C,CAA+C,CAAC;SAC3D,IAAI,CAAC,cAAM,OAAA,gBAAS,CAAI,KAAK,CAAC,GAAG,aAAU,EAAE,KAAK,CAAC,IAAI,CAAC,EAA7C,CAA6C,CAAC;SACzD,IAAI,CAAC,cAAM,OAAA,sBAAY,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,EAApD,CAAoD,CAAC;SAChE,IAAI,CAAC;QACJ,GAAG,CAAC,OAAO,CAAC,gCAA8B,KAAK,CAAC,GAAG,qBAAgB,KAAK,CAAC,IAAM,CAAC,CAAC;IACnF,CAAC,CAAC;SACD,KAAK,CAAC,UAAC,GAAG;QACT,uDAAuD;QACvD,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACf,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AAEP,CAAC,CAAA","sourcesContent":["// BUILD STEP IMPLEMENTATIONS\nimport { readPackage, writePackage } from './steps/package';\nimport { copyFiles } from './util/copy';\nimport { rimraf } from './util/rimraf';\nimport { generateNgBundle } from './bundler';\n\n// Logging\nimport * as log from './util/log';\n\n// `ng-package.json` config\nimport { NgPackage } from './model/ng-package';\n\n\n\n/** CLI arguments passed to `ng-packagr` and `ngPackage()`. */\nexport interface NgPackagrCliArguments {\n  /** Path to the 'ng-package.json' file */\n  project: string\n}\n\n\nexport const ngPackage = (opts: NgPackagrCliArguments): Promise<any> => {\n  log.info(`Building Angular library`);\n\n  /** Project configuration */\n  let ngPkg: NgPackage;\n\n  // 0. READ `ng-package.json` and obtain model\n  return readPackage(opts.project)\n    .then((p) => {\n      log.debug('package loaded');\n      log.debug(JSON.stringify(p));\n      ngPkg = p;\n\n      // 1. CLEAN\n      return Promise.all([\n        rimraf(p.dest),\n        rimraf(p.workingDirectory)\n      ]);\n    })\n    // 1. Generate bundle for primary entrypoint\n    .then(() => generateNgBundle(ngPkg, ngPkg))\n    // TODO: generate bundles for secondary entrypoints\n    // TODO: write package.json 'lite' for secondary entrypoints\n    // 2. WRITE NPM PACKAGE\n    .then(() => copyFiles(`${ngPkg.src}/README.md`, ngPkg.dest))\n    .then(() => copyFiles(`${ngPkg.src}/LICENSE`, ngPkg.dest))\n    .then(() => writePackage(ngPkg.src, ngPkg.dest, ngPkg.artefacts))\n    .then(() => {\n      log.success(`Built Angular library from ${ngPkg.src}, written to ${ngPkg.dest}`);\n    })\n    .catch((err) => {\n      // Report error messages and throw the error further up\n      log.error(err);\n      return Promise.reject(err);\n    });\n\n}\n"]}