{"version":3,"file":"json.js","sourceRoot":"","sources":["../../../src/lib/util/json.ts"],"names":[],"mappings":";;AAAA,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC5B,2BAA2C;AAC3C,yCAAwC;AAExC;;;;GAIG;AACU,QAAA,QAAQ,GAAG,UAAC,IAAY;IACnC,OAAA,aAAQ,CAAC,IAAI,CAAC;SACX,IAAI,CAAC,UAAC,OAAe,IAAK,OAAA,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAApC,CAAoC,CAAC;AADlE,CACkE,CAAC;AAGrE;;;;;GAKG;AACU,QAAA,SAAS,GAAG,UAAC,MAAW,EAAE,IAAY;IACjD,OAAA,cAAS,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;AAArD,CAAqD,CAAC;AAGxD;;;;;;GAMG;AACU,QAAA,eAAe,GAAG,UAAC,WAAmB,EAAE,QAA+B;IAElF,MAAM,CAAC,qBAAS,CAAW,UAAC,eAAe;QACzC,IAAI,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;IACrC,CAAC,CAAC;SACD,IAAI,CAAC,UAAC,SAAmB;QACxB,OAAA,OAAO,CAAC,GAAG,CACT,SAAS,CAAC,GAAG,CAAC,UAAC,QAAgB;YAC7B,OAAA,aAAQ,CAAC,QAAQ,CAAC;iBACf,IAAI,CAAC,UAAC,WAAmB;gBACxB,OAAA,cAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAAtE,CAAsE,CACvE;QAHH,CAGG,CACJ,CAAC;IANJ,CAMI,CACH;SACF,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;AAEjC,CAAC,CAAC","sourcesContent":["const glob = require('glob')\nimport { readFile, writeFile } from './fs';\nimport { promisify } from './promisify';\n\n/**\n * Reads a JSON file.\n *\n * @param file Source file name.\n */\nexport const readJson = (file: string): Promise<any> =>\n  readFile(file)\n    .then((content: string) => Promise.resolve(JSON.parse(content)));\n\n\n/**\n * Writes a JSON file.\n *\n * @param object Object literal that is stringified.\n * @param file Target file name.\n */\nexport const writeJson = (object: any, file: string): Promise<any> =>\n  writeFile(file, JSON.stringify(object, undefined, 2));\n\n\n/**\n * Modifies a set of JSON files by invoking `modifyFn`\n *\n * @param globPattern A glob pattern matching several files. Example: '**\\/*.js.map'\n * @param modifyFn A callback function that takes a JSON-parsed input and should return an output\n *                  that will be JSON-stringified\n */\nexport const modifyJsonFiles = (globPattern: string, modifyFn: (jsonObj: any) => any): Promise<void> => {\n\n  return promisify<string[]>((resolveOrReject) => {\n    glob(globPattern, resolveOrReject);\n  })\n  .then((fileNames: string[]): Promise<string[]> =>\n    Promise.all(\n      fileNames.map((fileName: string): Promise<string> =>\n        readFile(fileName)\n          .then((fileContent: string) =>\n            writeFile(fileName, JSON.stringify(modifyFn(JSON.parse(fileContent))))\n          )\n      ))\n    )\n  .then(() => Promise.resolve());\n\n};\n"]}