{"version":3,"file":"fs.js","sourceRoot":"","sources":["../../../src/lib/util/fs.ts"],"names":[],"mappings":";;AAAA,uBAAyB;AACzB,2BAA6B;AAC7B,IAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAClC,yCAAwC;AAE3B,QAAA,QAAQ,GAAG,UAAC,IAAY;IAEnC,MAAM,CAAC,qBAAS,CAAS,UAAC,eAAe;QACvC,IAAM,eAAe,GAAG;YACtB,QAAQ,EAAE,MAAM;YAChB,SAAS,EAAE,IAAI;SAChB,CAAC;QACF,IAAI,CAAC,IAAI,EAAE,eAAe,EAAE,UAAC,GAAG,EAAE,MAAe;YAC/C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,eAAe,CAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC1C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,eAAe,CAAC,GAAG,CAAC,CAAC;YACvB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC;AAEW,QAAA,SAAS,GAAG,UAAC,IAAY,EAAE,OAAY;IAElD,MAAM,CAAC,qBAAS,CAAS,UAAC,eAAe;QACvC,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC;AAGW,QAAA,iBAAiB,GAAG,UAAC,GAAW,EAAE,IAAY,EAAE,EAAO;IAElE,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACvC,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,UAAC,GAAG;QACzC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACR,yBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACvD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,QAAQ,CAAC,CAAC;QACf,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nconst read = require('read-file');\nimport { promisify } from './promisify';\n\nexport const readFile = (file: string): Promise<string> => {\n\n  return promisify<string>((resolveOrReject) => {\n    const fileReadOptions = {\n      encoding: 'utf8',\n      normalize: true\n    };\n    read(file, fileReadOptions, (err, buffer?: Buffer) => {\n      if (buffer) {\n        resolveOrReject(err, buffer.toString());\n      } else {\n        resolveOrReject(err);\n      }\n    });\n  });\n\n};\n\nexport const writeFile = (file: string, content: any): Promise<string> => {\n\n  return promisify<string>((resolveOrReject) => {\n    fs.writeFile(file, content, resolveOrReject);\n  });\n\n};\n\n\nexport const findFromDirectory = (dir: string, file: string, cb: any) => {\n\n  let fileName = path.resolve(dir, file);\n  fs.access(fileName, fs.constants.R_OK, (err) => {\n    if (err) {\n      findFromDirectory(path.resolve(dir, '..'), file, cb);\n    } else {\n      cb(fileName);\n    }\n  });\n};\n"]}