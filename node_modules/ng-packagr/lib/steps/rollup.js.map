{"version":3,"file":"rollup.js","sourceRoot":"","sources":["../../../src/lib/steps/rollup.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACnC,IAAM,WAAW,GAAG,OAAO,CAAC,4BAA4B,CAAC,CAAC;AAC1D,IAAM,QAAQ,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AACnD,mCAAoC;AACpC,yDAAwD;AAUxD;;;;GAIG;AACU,QAAA,MAAM,GAAG,UAAC,IAAmB;IAExC,IAAM,OAAO,gBAER,+BAAc,EAEd,IAAI,CAAC,SAAS,CAClB,CAAC;IAEF,IAAI,aAAa,GAAG;QAClB,OAAO,EAAE,MAAM;QACf,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QAC9B,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,OAAO,EAAE;YACL,WAAW,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;YAC3C,QAAQ,EAAE;SACb;QACD,MAAM,EAAE,UAAC,OAAO;YACZ,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,mBAAmB,CAAC,CAAC,CAAC;gBACzC,MAAM,CAAC;YACT,CAAC;YAED,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAClC,CAAC;KACF,CAAC;IAEF,IAAI,YAAY,GAAG;QACjB,4FAA4F;QAC5F,QAAQ,EAAE,EAAE;QACZ,IAAI,EAAE,KAAG,IAAI,CAAC,UAAY;QAC1B,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,MAAM,EAAE,IAAI,CAAC,MAAM;QACnB,MAAM,EAAE,EAAE;QACV,OAAO,EAAE,OAAO;QAChB,SAAS,EAAE,IAAI;KAChB,CAAC;IAEF,WAAK,CAAC,YAAU,IAAI,CAAC,KAAK,YAAO,IAAI,CAAC,IAAI,UAAK,IAAI,CAAC,MAAM,MAAG,CAAC,CAAC;IAE/D,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAC,MAAW,IAAK,OAAA,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,EAA1B,CAA0B,CAAC,CAAC;AAC1F,CAAC,CAAA","sourcesContent":["const __rollup = require('rollup');\nconst nodeResolve = require('rollup-plugin-node-resolve');\nconst commonJs = require('rollup-plugin-commonjs');\nimport { debug } from '../util/log';\nimport { ROLLUP_GLOBALS } from '../conf/rollup.globals';\n\nexport interface RollupOptions {\n  moduleName: string,\n  entry: string,\n  format: string,\n  dest: string,\n  externals: Object,\n}\n\n/**\n * Runs rollup over the given entry file, bundling it up.\n *\n * @param opts\n */\nexport const rollup = (opts: RollupOptions) => {\n\n  const globals = {\n    // default externals for '@angular/*' and 'rxjs'\n    ...ROLLUP_GLOBALS,\n    // external symbols passed from the user's ng-package.json\n    ...opts.externals,\n  };\n\n  let bundleOptions = {\n    context: 'this',\n    external: Object.keys(globals),\n    input: opts.entry,\n    plugins: [\n        nodeResolve({ jsnext: true, module: true }),\n        commonJs(),\n    ],\n    onwarn: (warning) => {\n        if (warning.code === 'THIS_IS_UNDEFINED') {\n          return;\n        }\n\n        console.warn(warning.message);\n    }\n  };\n\n  let writeOptions = {\n    // Keep the moduleId empty because we don't want to force developers to a specific moduleId.\n    moduleId: '',\n    name: `${opts.moduleName}`,\n    file: opts.dest,\n    format: opts.format,\n    banner: '',\n    globals: globals,\n    sourcemap: true\n  };\n\n  debug(`rollup ${opts.entry} to ${opts.dest} (${opts.format})`);\n\n  return __rollup.rollup(bundleOptions).then((bundle: any) => bundle.write(writeOptions));\n}\n"]}