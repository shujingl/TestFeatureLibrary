"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vfs = require('vinyl-fs');
var path = require("path");
var log_1 = require("../util/log");
var fs_1 = require("../util/fs");
// Angular Inliner for Templates and Stylesheets
var inlineNg2Template = require('gulp-inline-ng2-template');
// CSS Tools
var autoprefixer = require('autoprefixer');
var browserslist = require('browserslist');
//const postcss      = require('postcss');
var postcss = require("postcss");
var sass = require('node-sass');
var less = require("less");
var stylus = require("stylus");
/**
 * Process Angular components assets (HTML and Stylesheets).
 *
 * Inlines 'templateUrl' and 'styleUrl', compiles .scss to .css, and write .ts files to
 * destination directory.
 *
 * @param src Source folder
 * @param dest Destination folder
 */
exports.processAssets = function (src, dest) {
    return new Promise(function (resolve, reject) {
        log_1.debug("processAssets " + src + " to " + dest);
        vfs.src([src + "/**/*.ts", '!node_modules/**/*'])
            .pipe(inlineNg2Template({
            base: "" + src,
            useRelativePaths: true,
            styleProcessor: function (path, ext, file, cb) {
                log_1.debug("render stylesheet " + path);
                var render = pickRenderer(path, ext, file, src);
                log_1.debug("postcss with autoprefixer for " + path);
                var browsers = browserslist(undefined, { path: path });
                render
                    .then(function (css) {
                    return postcss([autoprefixer({ browsers: browsers })])
                        .process(css, { from: path, to: path.replace(ext, '.css') });
                })
                    .then(function (result) {
                    result.warnings().forEach(function (msg) {
                        log_1.warn(msg.toString());
                    });
                    cb(undefined, result.css);
                })
                    .catch(function (err) {
                    cb(err || new Error("Cannot inline stylesheet " + path));
                });
            }
        }))
            .on('error', reject)
            .pipe(vfs.dest("" + dest))
            .on('end', resolve);
    });
};
var sassImporter = function (url) {
    if (url[0] === '~') {
        url = path.resolve('node_modules', url.substr(1));
    }
    return { file: url };
};
var pickRenderer = function (filePath, ext, file, srcPath) {
    switch (path.extname(filePath)) {
        case '.scss':
        case '.sass':
            log_1.debug("rendering sass for " + filePath);
            return renderSass({ file: filePath, importer: sassImporter });
        case '.less':
            log_1.debug("rendering less for " + filePath);
            return renderLess({ filename: filePath });
        case '.styl':
        case '.stylus':
            log_1.debug("rendering styl for " + filePath);
            return renderStylus({ filename: filePath, root: srcPath });
        case '.css':
        default:
            return Promise.resolve(file);
    }
};
var renderSass = function (sassOpts) {
    return new Promise(function (resolve, reject) {
        sass.render(sassOpts, function (err, result) {
            if (err) {
                reject(err);
            }
            else {
                resolve(result.css.toString());
            }
        });
    });
};
var renderLess = function (lessOpts) {
    return fs_1.readFile(lessOpts.filename)
        .then(function (lessData) { return new Promise(function (resolve, reject) {
        less.render(lessData || '', lessOpts, function (err, result) {
            if (err) {
                reject(err);
            }
            else {
                resolve(result.css.toString());
            }
        });
    }); });
};
/**
 * filename - absolute path to file
 * root - root folder of project (where ng-package.json is located)
 */
var renderStylus = function (_a) {
    var filename = _a.filename, root = _a.root;
    return fs_1.readFile(filename)
        .then(function (stylusData) { return new Promise(function (resolve, reject) {
        stylus(stylusData)
            .include(root)
            .include('.')
            .include('node_modules')
            .set('filename', filename)
            .set('resolve url', true)
            .define('url', stylus.resolver())
            .render(function (err, css) {
            if (err) {
                reject(err);
            }
            else {
                resolve(css);
            }
        });
    }); });
};
//# sourceMappingURL=assets.js.map