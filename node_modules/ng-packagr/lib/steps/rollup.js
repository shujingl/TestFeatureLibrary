"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var __rollup = require('rollup');
var nodeResolve = require('rollup-plugin-node-resolve');
var commonJs = require('rollup-plugin-commonjs');
var log_1 = require("../util/log");
var rollup_globals_1 = require("../conf/rollup.globals");
/**
 * Runs rollup over the given entry file, bundling it up.
 *
 * @param opts
 */
exports.rollup = function (opts) {
    var globals = __assign({}, rollup_globals_1.ROLLUP_GLOBALS, opts.externals);
    var bundleOptions = {
        context: 'this',
        external: Object.keys(globals),
        input: opts.entry,
        plugins: [
            nodeResolve({ jsnext: true, module: true }),
            commonJs(),
        ],
        onwarn: function (warning) {
            if (warning.code === 'THIS_IS_UNDEFINED') {
                return;
            }
            console.warn(warning.message);
        }
    };
    var writeOptions = {
        // Keep the moduleId empty because we don't want to force developers to a specific moduleId.
        moduleId: '',
        name: "" + opts.moduleName,
        file: opts.dest,
        format: opts.format,
        banner: '',
        globals: globals,
        sourcemap: true
    };
    log_1.debug("rollup " + opts.entry + " to " + opts.dest + " (" + opts.format + ")");
    return __rollup.rollup(bundleOptions).then(function (bundle) { return bundle.write(writeOptions); });
};
//# sourceMappingURL=rollup.js.map