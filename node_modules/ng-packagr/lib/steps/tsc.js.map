{"version":3,"file":"tsc.js","sourceRoot":"","sources":["../../../src/lib/steps/tsc.ts"],"names":[],"mappings":";;AAAA,2BAA6B;AAC7B,+BAAiC;AACjC,yCAAsD;AACtD,iCAAiD;AACjD,mCAAoC;AAEpC;;;;;GAKG;AACU,QAAA,gBAAgB,GAAG,UAAC,SAAiB,EAAE,UAAkB;IAEpE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,WAAK,CAAC,SAAO,SAAS,YAAO,UAAY,CAAC,CAAC;SAC/D,IAAI,CAAC,cAAM,OAAA,aAAQ,CAAC,SAAS,CAAC,EAAnB,CAAmB,CAAC;SAC/B,IAAI,CAAC,UAAC,KAAK,IAAK,OAAA,EAAE,CAAC,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE;QACnE,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;QACnC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC;QAC5C,eAAe,EAAE;YACf,MAAM,EAAE,yBAAY,CAAC,GAAG;YACxB,MAAM,EAAE,uBAAU,CAAC,MAAM;YACzB,OAAO,EAAE,IAAI;YACb,SAAS,EAAE,IAAI;SAChB;KACF,CAAC,EATe,CASf,CAAC;SACF,IAAI,CAAC,UAAC,UAAU;QACf,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACvD,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC9C,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;QAElD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;YACjB,cAAS,CAAC,UAAU,EAAE,UAAU,CAAC,UAAU,CAAC;YAC5C,cAAS,CAAI,UAAU,SAAM,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;SAC1D,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC;AAGF,IAAM,MAAM,GAAG,oCAAoC,CAAC;AACpD,IAAM,aAAa,GAAG,UAAC,WAAmB;IAExC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,oCAAoC,EAAE,EAAE,CAAC,CAAC;IACvE,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;AAEH,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport * as ts from 'typescript';\nimport { ScriptTarget, ModuleKind } from 'typescript';\nimport { readFile, writeFile } from '../util/fs';\nimport { debug } from '../util/log';\n\n/**\n * Downlevels a .js file from ES2015 to ES5. Internally, uses `tsc`.\n *\n * @param inputFile Tran\n * @param outputFile\n */\nexport const downlevelWithTsc = (inputFile: string, outputFile: string) => {\n\n  return Promise.resolve(debug(`tsc ${inputFile} to ${outputFile}`))\n    .then(() => readFile(inputFile))\n    .then((input) => ts.transpileModule(trimSourceMap(input.toString()), {\n      fileName: path.basename(outputFile),\n      moduleName: path.basename(outputFile, '.js'),\n      compilerOptions: {\n        target: ScriptTarget.ES5,\n        module: ModuleKind.ES2015,\n        allowJs: true,\n        sourceMap: true\n      }\n    }))\n    .then((transpiled) => {\n      const sourceMap = JSON.parse(transpiled.sourceMapText);\n      sourceMap['file'] = path.basename(outputFile);\n      sourceMap['sources'] = [path.basename(inputFile)];\n\n      return Promise.all([\n        writeFile(outputFile, transpiled.outputText),\n        writeFile(`${outputFile}.map`, JSON.stringify(sourceMap))\n      ]);\n    });\n\n};\n\n\nconst REGEXP = /\\/\\/# sourceMappingURL=.*\\.js\\.map/;\nconst trimSourceMap = (fileContent: string): string => {\n\n  if (fileContent.match(REGEXP)) {\n    return fileContent.replace(/\\/\\/# sourceMappingURL=.*\\.js\\.map/, '');\n  } else {\n    return fileContent;\n  }\n\n};\n"]}