{"version":3,"file":"package.js","sourceRoot":"","sources":["../../../src/lib/steps/package.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport { SchemaClassFactory } from '@ngtools/json-schema';\nimport { NgPackageConfig } from '../../ng-package.schema';\nimport { NgPackage } from '../model/ng-package';\nimport { readJson, writeJson } from '../util/json';\nimport { merge, isArray } from 'lodash';\nimport * as log from '../util/log';\n\n// this prevents array objects from getting merged to each other one by one\nfunction arrayMergeLogic(objValue, srcValue) {\n  if (isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n}\n\nconst schemaPromise = readJson(path.resolve(__dirname, '..', '..', 'ng-package.schema.json'))\n  .then((jsonSchema: any) => SchemaClassFactory<NgPackageConfig>(jsonSchema));\n\nconst resolvePaths = (workingDirectory: string, packageConfig: NgPackageConfig): void => {\n  if (packageConfig) {\n    if (packageConfig.dest) {\n      packageConfig.dest = path.resolve(workingDirectory, packageConfig.dest);\n    }\n\n    if (packageConfig.src) {\n      packageConfig.src = path.resolve(workingDirectory, packageConfig.src);\n    }\n  }\n};\n\nconst readNgPackageFile = (filePath: string): Promise<NgPackageConfig> => {\n\n  log.debug('Searching for ng-package config at ' + filePath);\n  return readJson(filePath)\n    .then((ngPkg: NgPackageConfig) => {\n      log.debug('Ng-package config found at ' + filePath);\n      const basePath: string = path.dirname(filePath);\n      resolvePaths(basePath, ngPkg);\n      log.debug(JSON.stringify(ngPkg));\n      return ngPkg;\n    })\n    .catch(error => {\n      if (error.code === 'ENOENT') {\n        log.debug('ng-package config file not found');\n        // if the file does not exist, that's ok\n        return Promise.resolve<NgPackageConfig>({});\n      }\n\n      return Promise.reject(error);\n    });\n\n};\n\n\n/**\n * Reads an Angular package definition first from the passed in file path,\n * then from the default ng-package.json file,\n * then from package.json, and merges the json into one config object.\n *\n * @param workingDirectory path to the working directory\n * @param file path pointing to `ng-package.json` file\n */\nexport const readPackage = (file: string): Promise<NgPackage> => {\n\n  if (!path.isAbsolute(file)) {\n    file = path.resolve(process.cwd(), file);\n  }\n\n  const baseDirectory = path.dirname(file);\n\n  // read custom ng-package config file\n  let promiseChain = readNgPackageFile(file);\n\n  const defaultPath = path.join(baseDirectory, 'ng-package.json');\n  if (defaultPath !== file) {\n    // read default ng-package config file\n    promiseChain = promiseChain.then((ngPkg: NgPackageConfig) => {\n\n      return readNgPackageFile(defaultPath)\n        .then((otherNgPkg: NgPackageConfig) => {\n          // merge both ng-package config objects\n          return merge(ngPkg, otherNgPkg, arrayMergeLogic);\n        });\n\n    });\n  }\n\n  return promiseChain\n    .then((ngPkg: NgPackageConfig) => {\n      // resolve paths relative to `ng-package.json` file\n      const dir = path.resolve(baseDirectory, ngPkg.src || '.');\n\n      // read 'package.json'\n      log.debug('loading package.json');\n      return readJson(path.resolve(dir, 'package.json'))\n        .then((pkg: any) => {\n          // merge package.json ng-package config\n          const finalPackageConfig = merge(ngPkg, pkg.ngPackage, arrayMergeLogic);\n\n          // read 'ng-package.schema.json'\n          return schemaPromise.then((SchemaClass) => {\n            const schema = new SchemaClass(ngPkg);\n\n            return new NgPackage(pkg, finalPackageConfig, dir, schema);\n          });\n\n      });\n    });\n}\n\n\n/**\n * Creates a `package.json` file by reading one from the `src` folder, adding additional\n * properties, and writing to to `dest` folder\n *\n * @param src Source folder\n * @param dest Destination folder\n * @param additionalProperties These properties are added to the `package.json`\n */\nexport const writePackage = (src: string, dest: string, additionalProperties?: {}): Promise<any> => {\n\n  return readJson(path.resolve(src, 'package.json')).then((packageJson) => {\n    // set additional properties\n    if (additionalProperties) {\n      Object.keys(additionalProperties).forEach((key) => {\n        packageJson[key] = additionalProperties[key];\n      });\n    }\n\n    return writeJson(packageJson, `${dest}/package.json`);\n  });\n}\n"]}