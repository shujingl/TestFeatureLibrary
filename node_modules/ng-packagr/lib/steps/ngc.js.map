{"version":3,"file":"ngc.js","sourceRoot":"","sources":["../../../src/lib/steps/ngc.ts"],"names":[],"mappings":";;AAAA,2BAA6B;AAC7B,oDAAmD;AAEnD,qCAAmD;AACnD,mCAAoC;AAGvB,QAAA,eAAe,GAAG,UAAC,KAAgB,EAAE,OAAe;IAE/D,MAAM,CAAC,eAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,mBAAmB,CAAC,CAAC;SACxE,IAAI,CAAC,UAAC,QAAa;QAElB,QAAQ,CAAC,wBAAwB,CAAC,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;QAC5E,QAAQ,CAAC,wBAAwB,CAAC,CAAC,mBAAmB,CAAC,GAAM,KAAK,CAAC,kBAAkB,QAAK,CAAC;QAE3F,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAE,KAAK,CAAC,SAAS,CAAE,CAAC;QAExC,MAAM,CAAC,gBAAS,CAAC,QAAQ,EAAE,OAAO,CAAC;aAChC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,EAAxB,CAAwB,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACP,CAAC,CAAA;AAGD;;;;GAIG;AACU,QAAA,GAAG,GAAG,UAAC,QAAgB,EAAE,QAAgB;IACpD,WAAK,CAAC,SAAO,QAAQ,sBAAiB,QAAQ,QAAK,CAAC,CAAC;IAErD,MAAM,CAAC,kBAAG,CAAC,QAAQ,EAAE,EAAE,QAAQ,UAAA,EAAE,CAAC;SAC/B,IAAI,CAAC,cAAM,OAAA,eAAQ,CAAC,QAAQ,CAAC;SAC3B,IAAI,CAAC,UAAA,CAAC,IAAI,OAAG,QAAQ,SAAI,CAAC,CAAC,eAAe,CAAC,MAAM,SAAI,CAAC,CAAC,sBAAsB,CAAC,iBAAmB,EAAvF,CAAuF,CAAC,EADzF,CACyF,CAAC,CAAC;AAC3G,CAAC,CAAA","sourcesContent":["import * as path from 'path';\nimport { main as tsc } from '@angular/tsc-wrapped';\nimport { NgPackage } from '../model/ng-package';\nimport { readJson, writeJson } from '../util/json';\nimport { debug } from '../util/log';\n\n\nexport const prepareTsConfig = (ngPkg: NgPackage, outFile: string): Promise<string> => {\n\n  return readJson(path.resolve(__dirname, '..', 'conf', 'tsconfig.ngc.json'))\n    .then((tsConfig: any) => {\n\n      tsConfig['angularCompilerOptions']['flatModuleId'] = ngPkg.packageJson.name;\n      tsConfig['angularCompilerOptions']['flatModuleOutFile'] = `${ngPkg.flatModuleFileName}.js`;\n\n      tsConfig['files'] = [ ngPkg.entryFile ];\n\n      return writeJson(tsConfig, outFile)\n        .then(() => Promise.resolve(outFile));\n    });\n}\n\n\n/**\n * Compiles typescript sources with 'ngc'.\n *\n * @param basePath\n */\nexport const ngc = (tsconfig: string, basePath: string): Promise<string> => {\n  debug(`ngc ${tsconfig}, { basePath: ${basePath} })`);\n\n  return tsc(tsconfig, { basePath })\n    .then(() => readJson(tsconfig)\n      .then(v => `${basePath}/${v.compilerOptions.outDir}/${v.angularCompilerOptions.flatModuleOutFile}`));\n}\n"]}