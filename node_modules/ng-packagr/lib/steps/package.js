"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var json_schema_1 = require("@ngtools/json-schema");
var ng_package_1 = require("../model/ng-package");
var json_1 = require("../util/json");
var lodash_1 = require("lodash");
var log = require("../util/log");
// this prevents array objects from getting merged to each other one by one
function arrayMergeLogic(objValue, srcValue) {
    if (lodash_1.isArray(objValue)) {
        return objValue.concat(srcValue);
    }
}
var schemaPromise = json_1.readJson(path.resolve(__dirname, '..', '..', 'ng-package.schema.json'))
    .then(function (jsonSchema) { return json_schema_1.SchemaClassFactory(jsonSchema); });
var resolvePaths = function (workingDirectory, packageConfig) {
    if (packageConfig) {
        if (packageConfig.dest) {
            packageConfig.dest = path.resolve(workingDirectory, packageConfig.dest);
        }
        if (packageConfig.src) {
            packageConfig.src = path.resolve(workingDirectory, packageConfig.src);
        }
    }
};
var readNgPackageFile = function (filePath) {
    log.debug('Searching for ng-package config at ' + filePath);
    return json_1.readJson(filePath)
        .then(function (ngPkg) {
        log.debug('Ng-package config found at ' + filePath);
        var basePath = path.dirname(filePath);
        resolvePaths(basePath, ngPkg);
        log.debug(JSON.stringify(ngPkg));
        return ngPkg;
    })
        .catch(function (error) {
        if (error.code === 'ENOENT') {
            log.debug('ng-package config file not found');
            // if the file does not exist, that's ok
            return Promise.resolve({});
        }
        return Promise.reject(error);
    });
};
/**
 * Reads an Angular package definition first from the passed in file path,
 * then from the default ng-package.json file,
 * then from package.json, and merges the json into one config object.
 *
 * @param workingDirectory path to the working directory
 * @param file path pointing to `ng-package.json` file
 */
exports.readPackage = function (file) {
    if (!path.isAbsolute(file)) {
        file = path.resolve(process.cwd(), file);
    }
    var baseDirectory = path.dirname(file);
    // read custom ng-package config file
    var promiseChain = readNgPackageFile(file);
    var defaultPath = path.join(baseDirectory, 'ng-package.json');
    if (defaultPath !== file) {
        // read default ng-package config file
        promiseChain = promiseChain.then(function (ngPkg) {
            return readNgPackageFile(defaultPath)
                .then(function (otherNgPkg) {
                // merge both ng-package config objects
                return lodash_1.merge(ngPkg, otherNgPkg, arrayMergeLogic);
            });
        });
    }
    return promiseChain
        .then(function (ngPkg) {
        // resolve paths relative to `ng-package.json` file
        var dir = path.resolve(baseDirectory, ngPkg.src || '.');
        // read 'package.json'
        log.debug('loading package.json');
        return json_1.readJson(path.resolve(dir, 'package.json'))
            .then(function (pkg) {
            // merge package.json ng-package config
            var finalPackageConfig = lodash_1.merge(ngPkg, pkg.ngPackage, arrayMergeLogic);
            // read 'ng-package.schema.json'
            return schemaPromise.then(function (SchemaClass) {
                var schema = new SchemaClass(ngPkg);
                return new ng_package_1.NgPackage(pkg, finalPackageConfig, dir, schema);
            });
        });
    });
};
/**
 * Creates a `package.json` file by reading one from the `src` folder, adding additional
 * properties, and writing to to `dest` folder
 *
 * @param src Source folder
 * @param dest Destination folder
 * @param additionalProperties These properties are added to the `package.json`
 */
exports.writePackage = function (src, dest, additionalProperties) {
    return json_1.readJson(path.resolve(src, 'package.json')).then(function (packageJson) {
        // set additional properties
        if (additionalProperties) {
            Object.keys(additionalProperties).forEach(function (key) {
                packageJson[key] = additionalProperties[key];
            });
        }
        return json_1.writeJson(packageJson, dest + "/package.json");
    });
};
//# sourceMappingURL=package.js.map