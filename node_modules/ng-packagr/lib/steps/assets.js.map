{"version":3,"file":"assets.js","sourceRoot":"","sources":["../../../src/lib/steps/assets.ts"],"names":[],"mappings":"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","sourcesContent":["const vfs = require('vinyl-fs');\nimport * as path from 'path';\nimport { debug, warn } from '../util/log';\nimport { readFile } from '../util/fs';\n\n// Angular Inliner for Templates and Stylesheets\nconst inlineNg2Template =  require('gulp-inline-ng2-template');\n\n// CSS Tools\nconst autoprefixer = require('autoprefixer');\nconst browserslist = require('browserslist');\n//const postcss      = require('postcss');\nimport postcss     = require('postcss');\nconst sass         = require('node-sass');\nimport * as less from 'less';\nimport * as stylus from 'stylus';\n\n\n/**\n * Process Angular components assets (HTML and Stylesheets).\n *\n * Inlines 'templateUrl' and 'styleUrl', compiles .scss to .css, and write .ts files to\n * destination directory.\n *\n * @param src Source folder\n * @param dest Destination folder\n */\nexport const processAssets = (src: string, dest: string): Promise<any> => {\n\n  return new Promise((resolve, reject) => {\n    debug(`processAssets ${src} to ${dest}`);\n\n    vfs.src([`${src}/**/*.ts`, '!node_modules/**/*'])\n      .pipe(inlineNg2Template({\n        base: `${src}`,\n        useRelativePaths: true,\n        styleProcessor: (path, ext, file, cb) => {\n\n          debug(`render stylesheet ${path}`);\n          const render = pickRenderer(path, ext, file, src);\n\n          debug(`postcss with autoprefixer for ${path}`);\n          const browsers = browserslist(undefined, { path });\n\n          render\n            .then((css: string) => {\n              return postcss([ autoprefixer({ browsers }) ])\n                .process(css, { from: path, to: path.replace(ext, '.css') });\n            })\n            .then((result: postcss.Result) => {\n\n              result.warnings().forEach((msg) => {\n                warn(msg.toString());\n              });\n\n              cb(undefined, result.css);\n            })\n            .catch((err) => {\n              cb(err || new Error(`Cannot inline stylesheet ${path}`));\n            });\n\n        }\n      }))\n      .on('error', reject)\n      .pipe(vfs.dest(`${dest}`))\n      .on('end', resolve);\n  });\n\n}\n\n\nconst sassImporter = (url: string): any => {\n  if (url[0] === '~') {\n    url = path.resolve('node_modules', url.substr(1));\n  }\n\n  return { file: url };\n}\n\n\nconst pickRenderer = (filePath: string, ext: string[], file: string, srcPath: string): Promise<string> => {\n\n  switch (path.extname(filePath)) {\n\n    case '.scss':\n    case '.sass':\n      debug(`rendering sass for ${filePath}`);\n      return renderSass({ file: filePath, importer: sassImporter });\n\n    case '.less':\n      debug(`rendering less for ${filePath}`);\n      return renderLess({ filename: filePath });\n\n    case '.styl':\n    case '.stylus':\n      debug(`rendering styl for ${filePath}`);\n      return renderStylus({ filename: filePath, root: srcPath });\n\n    case '.css':\n    default:\n      return Promise.resolve(file);\n  }\n\n}\n\n\nconst renderSass = (sassOpts: any): Promise<string> => {\n\n  return new Promise((resolve, reject) => {\n\n    sass.render(sassOpts, (err, result) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result.css.toString());\n      }\n    });\n  });\n}\n\nconst renderLess = (lessOpts: any): Promise<string> => {\n\n  return readFile(lessOpts.filename)\n    .then((lessData: string) => new Promise<string>((resolve, reject) => {\n        less.render(lessData || '', lessOpts, (err, result) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(result.css.toString());\n        }\n      })\n    }));\n}\n\n/**\n * filename - absolute path to file\n * root - root folder of project (where ng-package.json is located)\n */\nconst renderStylus = ({ filename, root }): Promise<string> => {\n  return readFile(filename)\n    .then((stylusData: string) => new Promise<string>((resolve, reject) => {\n      stylus(stylusData)\n        // add paths for resolve\n        .include(root)\n        .include('.')\n        // add support for resolving plugins from node_modules\n        .include('node_modules')\n        .set('filename', filename)\n        // turn on url resolver in stylus, same as flag --resolve-url\n        .set('resolve url', true)\n        .define('url', stylus.resolver())\n        .render((err, css) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(css);\n          }\n        });\n      }));\n}\n"]}