{"version":3,"file":"sorcery.js","sourceRoot":"","sources":["../../../src/lib/steps/sorcery.ts"],"names":[],"mappings":";;AAAA,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACnC,mCAAoC;AAGpC;;;;;GAKG;AACU,QAAA,cAAc,GAAG,UAAC,UAAkB,EAAE,IAAa;IAC9D,WAAK,CAAC,4BAA0B,UAAY,CAAC,CAAC;IAC9C,IAAM,IAAI,GAAQ;QAChB,MAAM,EAAE,KAAK;QACb,cAAc,EAAE,IAAI;KACrB,CAAC;IACF,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACT,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,iGAAiG;IACjG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC;SAC5B,IAAI,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAjB,CAAiB,CAAC,CAAC;AACxC,CAAC,CAAA","sourcesContent":["const sorcery = require('sorcery');\nimport { debug } from '../util/log';\n\n\n/**\n * Re-maps the source `.map` file for the given `sourceFile`. This keeps source maps intact over\n * a series of transpilations!\n *\n * @param sourceFile Source file\n */\nexport const remapSourcemap = (sourceFile: string, base?: string): Promise<any> => {\n  debug(`re-mapping sources for ${sourceFile}`);\n  const opts: any = {\n    inline: false,\n    includeContent: true,\n  };\n  if (base) {\n    opts.base = base;\n  }\n\n  // Once sorcery loaded the chain of sourcemaps, the new sourcemap will be written asynchronously.\n  return sorcery.load(sourceFile)\n    .then((chain) => chain.write(opts));\n}\n"]}